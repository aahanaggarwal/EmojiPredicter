{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Bag of Words and Skip Gram","provenance":[],"collapsed_sections":[],"mount_file_id":"1RIYyDv1rrigTosLDdjqlWR3C0VBUI_zh","authorship_tag":"ABX9TyOAkio39bsKliEMMRHP5DeA"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nSGc3dy6azXI","executionInfo":{"status":"ok","timestamp":1636603021404,"user_tz":300,"elapsed":12984,"user":{"displayName":"Aahan Aggarwal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjERRQGtR0gQOUJNzTfzBKSJyJNpOF1ddlzvt-6Cmg=s64","userId":"07607731306192708790"}},"outputId":"e605d34d-dd8b-444d-dc81-7c9a813b5c76"},"source":["import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torch.optim as optim\n","from torch.utils.data import Dataset, DataLoader\n","import numpy as np\n","import pandas as pd\n","from torchvision import transforms\n","\n","torch.manual_seed(1)"],"execution_count":1,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<torch._C.Generator at 0x7fbb716e53b0>"]},"metadata":{},"execution_count":1}]},{"cell_type":"code","metadata":{"id":"uYL34M-3bEYS","executionInfo":{"status":"ok","timestamp":1636603038707,"user_tz":300,"elapsed":214,"user":{"displayName":"Aahan Aggarwal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjERRQGtR0gQOUJNzTfzBKSJyJNpOF1ddlzvt-6Cmg=s64","userId":"07607731306192708790"}}},"source":["class EmojiDataset(Dataset):\n","    def __init__(self, csv_file, transform=None):\n","        self.tweets_frame = pd.read_csv(csv_file)\n","        self.transform = transform\n","\n","    def __len__(self):\n","        return len(self.tweets_frame)\n","\n","    def __getitem__(self, index):\n","        if torch.is_tensor(index):\n","            index = index.tolist()\n","\n","        sentence = str(self.tweets_frame.iloc[index, 0])\n","        words = np.array(sentence.split(\" \"))\n","        emoji = self.tweets_frame.iloc[index, 1]\n","\n","        return emoji, \" \".join(words)"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"SN2O7AepbGn2","executionInfo":{"status":"ok","timestamp":1636603046616,"user_tz":300,"elapsed":4901,"user":{"displayName":"Aahan Aggarwal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjERRQGtR0gQOUJNzTfzBKSJyJNpOF1ddlzvt-6Cmg=s64","userId":"07607731306192708790"}}},"source":["from collections import defaultdict\n","\n","emojis_we_want = {':red_heart:': 0, ':face_with_tears_of_joy:': 0, ':loudly_crying_face:': 0, ':smiling_face_with_heart-eyes:': 0, ':fire:': 0}\n","training_data = EmojiDataset(csv_file='/content/drive/MyDrive/Colab Notebooks/py_dev_clean.csv')\n"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_pFliVyubKPq","executionInfo":{"status":"ok","timestamp":1636603048260,"user_tz":300,"elapsed":156,"user":{"displayName":"Aahan Aggarwal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjERRQGtR0gQOUJNzTfzBKSJyJNpOF1ddlzvt-6Cmg=s64","userId":"07607731306192708790"}},"outputId":"7ea43ce0-d42c-4419-a00b-24a6510da663"},"source":["print(len(training_data))"],"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["1641907\n"]}]},{"cell_type":"code","metadata":{"id":"-GN_EG_gbZPQ","executionInfo":{"status":"ok","timestamp":1636603174282,"user_tz":300,"elapsed":118836,"user":{"displayName":"Aahan Aggarwal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjERRQGtR0gQOUJNzTfzBKSJyJNpOF1ddlzvt-6Cmg=s64","userId":"07607731306192708790"}}},"source":["from torchtext.data.utils import get_tokenizer\n","from torchtext.vocab import build_vocab_from_iterator\n","\n","tokenizer = get_tokenizer('basic_english')\n","\n","def yield_tokens(data_iter):\n","    for _, text in data_iter:\n","        yield tokenizer(text)\n","\n","vocab = build_vocab_from_iterator(yield_tokens(training_data), specials=[\"<unk>\"])\n","vocab.set_default_index(vocab[\"<unk>\"])"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KtaNVlqqdyRX","executionInfo":{"status":"ok","timestamp":1636604080582,"user_tz":300,"elapsed":201,"user":{"displayName":"Aahan Aggarwal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjERRQGtR0gQOUJNzTfzBKSJyJNpOF1ddlzvt-6Cmg=s64","userId":"07607731306192708790"}},"outputId":"56ede253-1356-4a92-f4b4-863eed093199"},"source":["vocab(['here', 'is', 'an', 'example'])\n","# vocab(tokenizer(\"here is an example\"))\n","print(len(vocab))"],"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["259936\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TgJmHPg5baxr","executionInfo":{"status":"ok","timestamp":1636603278304,"user_tz":300,"elapsed":91268,"user":{"displayName":"Aahan Aggarwal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjERRQGtR0gQOUJNzTfzBKSJyJNpOF1ddlzvt-6Cmg=s64","userId":"07607731306192708790"}},"outputId":"02ee502a-a381-401c-cebd-1e8f862ac54b"},"source":["tag_to_ix = {}\n","# For each words-list (sentence) and tags-list in each tuple of training_data\n","for emoji, words in training_data:\n","    if emoji not in tag_to_ix:\n","        tag_to_ix[emoji] = len(tag_to_ix)  # Assign each word with a unique index\n","print(tag_to_ix)"],"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["{':red_heart:': 0, ':person_shrugging:': 1, ':face_with_tears_of_joy:': 2, ':backhand_index_pointing_down:': 3, ':party_popper:': 4, ':person_facepalming:': 5, ':smiling_face_with_heart-eyes:': 6, ':clapping_hands:': 7, ':weary_face:': 8, ':male_sign:': 9, ':folded_hands:': 10, ':hundred_points:': 11, ':loudly_crying_face:': 12, ':rolling_on_the_floor_laughing:': 13, ':flexed_biceps:': 14, ':eyes:': 15, ':backhand_index_pointing_right:': 16, ':police_car_light:': 17, ':female_sign:': 18, ':crying_face:': 19, ':purple_heart:': 20, ':yellow_heart:': 21, ':smiling_face:': 22, ':sparkles:': 23, ':heart_suit:': 24, ':face_with_rolling_eyes:': 25, ':collision:': 26, ':two_hearts:': 27, ':thumbs_up:': 28, ':white_heavy_check_mark:': 29, ':face_blowing_a_kiss:': 30, ':sparkling_heart:': 31, ':right_arrow:': 32, ':winking_face:': 33, ':raising_hands:': 34, ':double_exclamation_mark:': 35, ':smiling_face_with_smiling_eyes:': 36, ':heavy_check_mark:': 37, ':fire:': 38, ':beaming_face_with_smiling_eyes:': 39, ':ok_hand:': 40, ':speaking_head:': 41, ':blue_heart:': 42, ':flushed_face:': 43, ':skull:': 44, ':glowing_star:': 45, ':smiling_face_with_sunglasses:': 46, ':thinking_face:': 47, ':trophy:': 48}\n"]}]},{"cell_type":"code","metadata":{"id":"YP_4fkxOeObM","executionInfo":{"status":"ok","timestamp":1636603288562,"user_tz":300,"elapsed":117,"user":{"displayName":"Aahan Aggarwal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjERRQGtR0gQOUJNzTfzBKSJyJNpOF1ddlzvt-6Cmg=s64","userId":"07607731306192708790"}}},"source":["text_pipeline = lambda x: vocab(tokenizer(x))\n","label_pipeline = lambda x: tag_to_ix[x]"],"execution_count":8,"outputs":[]},{"cell_type":"code","metadata":{"id":"zems6dSJdKxC","executionInfo":{"status":"ok","timestamp":1636603289412,"user_tz":300,"elapsed":128,"user":{"displayName":"Aahan Aggarwal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjERRQGtR0gQOUJNzTfzBKSJyJNpOF1ddlzvt-6Cmg=s64","userId":"07607731306192708790"}}},"source":["from torch.utils.data import DataLoader\n","device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","\n","def collate_batch(batch):\n","    label_list, text_list, offsets = [], [], [0]\n","    for (_label, _text) in batch:\n","         label_list.append(label_pipeline(_label))\n","         processed_text = torch.tensor(text_pipeline(_text), dtype=torch.int64)\n","         text_list.append(processed_text)\n","         offsets.append(processed_text.size(0))\n","    label_list = torch.tensor(label_list, dtype=torch.int64)\n","    offsets = torch.tensor(offsets[:-1]).cumsum(dim=0)\n","    text_list = torch.cat(text_list)\n","    return label_list.to(device), text_list.to(device), offsets.to(device)\n","\n","dataloader = DataLoader(training_data, batch_size=8, shuffle=False, collate_fn=collate_batch)"],"execution_count":9,"outputs":[]},{"cell_type":"code","metadata":{"id":"vIGIosbxbuuv","executionInfo":{"status":"ok","timestamp":1636604154257,"user_tz":300,"elapsed":122,"user":{"displayName":"Aahan Aggarwal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjERRQGtR0gQOUJNzTfzBKSJyJNpOF1ddlzvt-6Cmg=s64","userId":"07607731306192708790"}}},"source":["class TextClassificationModelBOW(nn.Module):\n","\n","    def __init__(self, vocab_size, embed_dim, num_class):\n","        super(TextClassificationModelBOW, self).__init__()\n","        self.embedding = nn.EmbeddingBag(vocab_size, embed_dim, sparse=True)\n","        self.fc = nn.Linear(embed_dim, num_class)\n","        self.init_weights()\n","\n","    def init_weights(self):\n","        initrange = 0.5\n","        self.embedding.weight.data.uniform_(-initrange, initrange)\n","        self.fc.weight.data.uniform_(-initrange, initrange)\n","        self.fc.bias.data.zero_()\n","\n","    def forward(self, text, offsets):\n","        embedded = self.embedding(text, offsets)\n","        return self.fc(embedded)\n","\n","class TextClassificationModelSKIP(nn.Module):\n","\n","    def __init__(self, vocab_size, embed_dim, num_class):\n","        super(TextClassificationModelSKIP, self).__init__()\n","        self.embedding = nn.Embedding(vocab_size, embed_dim, sparse=True)\n","        self.fc1 = nn.Linear(embed_dim, 128)\n","        self.fc2 = nn.Linear(128, num_class)\n","        self.init_weights()\n","\n","    def init_weights(self):\n","        initrange = 0.5\n","        self.embedding.weight.data.uniform_(-initrange, initrange)\n","        self.fc1.weight.data.uniform_(-initrange, initrange)\n","        self.fc1.bias.data.zero_()\n","        self.fc2.weight.data.uniform_(-initrange, initrange)\n","        self.fc2.bias.data.zero_()\n","\n","    def forward(self, text):\n","        embedded = self.embedding(text)\n","        x = F.relu(self.fc1(embedded))\n","        x = F.relu(self.fc2(embedded))\n","        return F.log_softmax(x, dim=1)"],"execution_count":29,"outputs":[]},{"cell_type":"code","metadata":{"id":"DvWDIFlQM0hD","executionInfo":{"status":"ok","timestamp":1636604360593,"user_tz":300,"elapsed":120,"user":{"displayName":"Aahan Aggarwal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjERRQGtR0gQOUJNzTfzBKSJyJNpOF1ddlzvt-6Cmg=s64","userId":"07607731306192708790"}}},"source":["def prepare_sequence(seq, to_ix):\n","    idxs = [vocab(w) for w in seq]\n","    return torch.tensor(idxs, dtype=torch.long)"],"execution_count":36,"outputs":[]},{"cell_type":"code","metadata":{"id":"WdKBf_rvMpxc","executionInfo":{"status":"ok","timestamp":1636604006853,"user_tz":300,"elapsed":106,"user":{"displayName":"Aahan Aggarwal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjERRQGtR0gQOUJNzTfzBKSJyJNpOF1ddlzvt-6Cmg=s64","userId":"07607731306192708790"}}},"source":["EMBEDDING_DIM = 100\n","emojis = tag_to_ix.keys()\n","emojis_tensor = prepare_sequence(emojis, tag_to_ix)\n","emoji_embeddings = nn.Embedding(len(emojis), EMBEDDING_DIM)\n","\n","emoji_embeds = emoji_embeddings(emojis_tensor)"],"execution_count":21,"outputs":[]},{"cell_type":"code","metadata":{"id":"bKI6S7fhNgZ9","executionInfo":{"status":"ok","timestamp":1636604308631,"user_tz":300,"elapsed":87528,"user":{"displayName":"Aahan Aggarwal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjERRQGtR0gQOUJNzTfzBKSJyJNpOF1ddlzvt-6Cmg=s64","userId":"07607731306192708790"}}},"source":["from collections import defaultdict\n","\n","emojis_we_want = {\n","    ':red_heart:': 0, \n","    ':face_with_tears_of_joy:': 0, \n","    ':loudly_crying_face:': 0, \n","    ':smiling_face_with_heart-eyes:': 0, \n","    ':fire:': 0,\n","    ':folded_hands:': 0,\n","    ':weary_face:': 0,\n","    ':person_shrugging:': 0,\n","    ':two_hearts:': 0,\n","    ':sparkles:': 0\n","  }\n","training_data = EmojiDataset(csv_file='/content/drive/MyDrive/Colab Notebooks/py_dev_clean.csv')\n","train_sample = []\n","done = 0\n","i = 0\n","\n","num_in_emoji = 30000\n","\n","for emoji, sentence in training_data:\n","    if emoji in emojis_we_want.keys() and emojis_we_want[emoji] < num_in_emoji:\n","        train_sample.append(sample)\n","        emojis_we_want[emoji] += 1\n","\n","    if sum(list(emojis_we_want.values())) >= len(emojis_we_want.keys())*num_in_emoji:\n","      break"],"execution_count":32,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"h47mxW5JOBhm","executionInfo":{"status":"ok","timestamp":1636604335114,"user_tz":300,"elapsed":121,"user":{"displayName":"Aahan Aggarwal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjERRQGtR0gQOUJNzTfzBKSJyJNpOF1ddlzvt-6Cmg=s64","userId":"07607731306192708790"}},"outputId":"449731f4-6648-448d-c226-145253fc2f82"},"source":["print(len(train_sample))"],"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":["300000\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":255},"id":"NUrnL3VwM3Uu","executionInfo":{"status":"error","timestamp":1636604388715,"user_tz":300,"elapsed":591,"user":{"displayName":"Aahan Aggarwal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjERRQGtR0gQOUJNzTfzBKSJyJNpOF1ddlzvt-6Cmg=s64","userId":"07607731306192708790"}},"outputId":"8d423bd0-b22a-46f0-ae96-38466d14f692"},"source":["device = 'cuda' if torch.cuda.is_available()==True else 'cpu'\n","device = torch.device(device)\n","print(device)\n","\n","model = TextClassificationModelSKIP(len(vocab), EMBEDDING_DIM, len(tag_to_ix))\n","model = model.to(device)\n","\n","loss_function = nn.NLLLoss()\n","optimizer = optim.SGD(model.parameters(), lr=0.01)\n","model.train()\n","\n","\n","for epoch in range(3):\n","    epoch_loss = 0\n","    samples_seen = 0\n","\n","    partial_loss = 0\n","    for tag, sentence in train_sample:\n","        # sentence = sample['words']\n","        # tag = sample['emoji']\n","\n","        model.zero_grad()\n","\n","        # Step 2. Get our inputs ready for the network, that is, turn them into\n","        # Tensors of word indices.\n","\n","        # Step 3. Run our forward pass.\n","        sentence = sentence.to(device)\n","        tag_scores = model(sentence)\n","\n","        # Step 4. Compute the loss, gradients, and update the parameters by\n","        #  calling optimizer.step()\n","\n","        targets = targets.to(device)\n","        loss = loss_function(tag_scores, targets)\n","        epoch_loss += loss.item()\n","        partial_loss += loss.item()\n","        loss.backward()\n","        optimizer.step()\n","        samples_seen += 1\n","        if samples_seen % 1000 == 0:\n","            print(epoch, samples_seen, epoch_loss/samples_seen, partial_loss/1000)\n","            partial_loss = 0\n","\n","        \n","\n","# See what the scores are after training"],"execution_count":40,"outputs":[{"output_type":"stream","name":"stdout","text":["cuda\n"]},{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-40-addee3885c38>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     26\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     27\u001b[0m         \u001b[0;31m# Step 3. Run our forward pass.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 28\u001b[0;31m         \u001b[0msentence\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msentence\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     29\u001b[0m         \u001b[0mtag_scores\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msentence\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     30\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'str' object has no attribute 'to'"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ljhGRh2qbyAY","executionInfo":{"status":"ok","timestamp":1636603305201,"user_tz":300,"elapsed":9731,"user":{"displayName":"Aahan Aggarwal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjERRQGtR0gQOUJNzTfzBKSJyJNpOF1ddlzvt-6Cmg=s64","userId":"07607731306192708790"}},"outputId":"845466bb-100c-440c-83be-445df5fb5a09"},"source":["device = 'cuda' if torch.cuda.is_available()==True else 'cpu'\n","device = torch.device(device)\n","print(device)\n","\n","num_class = len(tag_to_ix.keys())\n","vocab_size = len(vocab)\n","emsize = 64\n","model = TextClassificationModelBOW(vocab_size, emsize, num_class).to(device)"],"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["cuda\n"]}]},{"cell_type":"code","metadata":{"id":"5bPnepl4cp2j","executionInfo":{"status":"ok","timestamp":1636603313941,"user_tz":300,"elapsed":117,"user":{"displayName":"Aahan Aggarwal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjERRQGtR0gQOUJNzTfzBKSJyJNpOF1ddlzvt-6Cmg=s64","userId":"07607731306192708790"}}},"source":["import time\n","\n","def train(dataloader):\n","    model.train()\n","    total_acc, total_count = 0, 0\n","    log_interval = 500\n","    start_time = time.time()\n","\n","    for idx, (label, text, offsets) in enumerate(dataloader):\n","        if label == 'words': continue\n","        optimizer.zero_grad()\n","        predicted_label = model(text, offsets)\n","        loss = criterion(predicted_label, label)\n","        loss.backward()\n","        torch.nn.utils.clip_grad_norm_(model.parameters(), 0.1)\n","        optimizer.step()\n","        total_acc += (predicted_label.argmax(1) == label).sum().item()\n","        total_count += label.size(0)\n","        if idx % log_interval == 0 and idx > 0:\n","            elapsed = time.time() - start_time\n","            print('| epoch {:3d} | {:5d}/{:5d} batches '\n","                  '| accuracy {:8.3f}'.format(epoch, idx, len(dataloader),\n","                                              total_acc/total_count))\n","            total_acc, total_count = 0, 0\n","            start_time = time.time()\n","\n","def evaluate(dataloader):\n","    model.eval()\n","    total_acc, total_count = 0, 0\n","\n","    with torch.no_grad():\n","        for idx, (label, text, offsets) in enumerate(dataloader):\n","            predicted_label = model(text, offsets)\n","            loss = criterion(predicted_label, label)\n","            total_acc += (predicted_label.argmax(1) == label).sum().item()\n","            total_count += label.size(0)\n","    return total_acc/total_count"],"execution_count":12,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"Rq3EictcesML","executionInfo":{"status":"error","timestamp":1636603935901,"user_tz":300,"elapsed":431609,"user":{"displayName":"Aahan Aggarwal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjERRQGtR0gQOUJNzTfzBKSJyJNpOF1ddlzvt-6Cmg=s64","userId":"07607731306192708790"}},"outputId":"9899f48a-1a5d-4aef-ffca-fedea29a857f"},"source":["from torch.utils.data.dataset import random_split\n","from torchtext.data.functional import to_map_style_dataset\n","# Hyperparameters\n","EPOCHS = 10 # epoch\n","LR = 5  # learning rate\n","BATCH_SIZE = 128 # batch size for training\n","\n","criterion = torch.nn.CrossEntropyLoss()\n","optimizer = torch.optim.SGD(model.parameters(), lr=LR)\n","scheduler = torch.optim.lr_scheduler.StepLR(optimizer, 1.0, gamma=0.1)\n","total_accu = None\n","\n","training_data = training_data\n","train_iter, test_iter = training_data, training_data\n","train_dataset = train_iter\n","test_dataset = test_iter\n","num_train = int(len(train_dataset) * 0.95)\n","split_train_, split_valid_ = \\\n","    random_split(train_dataset, [num_train, len(train_dataset) - num_train])\n","\n","train_dataloader = DataLoader(split_train_, batch_size=BATCH_SIZE,\n","                              shuffle=True, collate_fn=collate_batch)\n","valid_dataloader = DataLoader(split_valid_, batch_size=BATCH_SIZE,\n","                              shuffle=True, collate_fn=collate_batch)\n","test_dataloader = DataLoader(test_dataset, batch_size=BATCH_SIZE,\n","                             shuffle=True, collate_fn=collate_batch)\n","\n","for epoch in range(1, EPOCHS + 1):\n","    epoch_start_time = time.time()\n","    train(dataloader)\n","    accu_val = evaluate(valid_dataloader)\n","    if total_accu is not None and total_accu > accu_val:\n","      scheduler.step()\n","    else:\n","       total_accu = accu_val\n","    print('-' * 59)\n","    print('| end of epoch {:3d} | time: {:5.2f}s | '\n","          'valid accuracy {:8.3f} '.format(epoch,\n","                                           time.time() - epoch_start_time,\n","                                           accu_val))\n","    print('-' * 59)"],"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["| epoch   1 |   500/205239 batches | accuracy    0.301\n","| epoch   1 |  1000/205239 batches | accuracy    0.299\n","| epoch   1 |  1500/205239 batches | accuracy    0.284\n","| epoch   1 |  2000/205239 batches | accuracy    0.304\n","| epoch   1 |  2500/205239 batches | accuracy    0.302\n","| epoch   1 |  3000/205239 batches | accuracy    0.304\n","| epoch   1 |  3500/205239 batches | accuracy    0.301\n","| epoch   1 |  4000/205239 batches | accuracy    0.301\n","| epoch   1 |  4500/205239 batches | accuracy    0.306\n","| epoch   1 |  5000/205239 batches | accuracy    0.295\n","| epoch   1 |  5500/205239 batches | accuracy    0.297\n","| epoch   1 |  6000/205239 batches | accuracy    0.304\n","| epoch   1 |  6500/205239 batches | accuracy    0.299\n","| epoch   1 |  7000/205239 batches | accuracy    0.293\n","| epoch   1 |  7500/205239 batches | accuracy    0.295\n","| epoch   1 |  8000/205239 batches | accuracy    0.299\n","| epoch   1 |  8500/205239 batches | accuracy    0.293\n","| epoch   1 |  9000/205239 batches | accuracy    0.298\n","| epoch   1 |  9500/205239 batches | accuracy    0.302\n","| epoch   1 | 10000/205239 batches | accuracy    0.308\n","| epoch   1 | 10500/205239 batches | accuracy    0.299\n","| epoch   1 | 11000/205239 batches | accuracy    0.310\n","| epoch   1 | 11500/205239 batches | accuracy    0.293\n","| epoch   1 | 12000/205239 batches | accuracy    0.304\n","| epoch   1 | 12500/205239 batches | accuracy    0.311\n","| epoch   1 | 13000/205239 batches | accuracy    0.310\n","| epoch   1 | 13500/205239 batches | accuracy    0.309\n","| epoch   1 | 14000/205239 batches | accuracy    0.303\n","| epoch   1 | 14500/205239 batches | accuracy    0.306\n","| epoch   1 | 15000/205239 batches | accuracy    0.300\n","| epoch   1 | 15500/205239 batches | accuracy    0.303\n","| epoch   1 | 16000/205239 batches | accuracy    0.312\n","| epoch   1 | 16500/205239 batches | accuracy    0.302\n","| epoch   1 | 17000/205239 batches | accuracy    0.317\n","| epoch   1 | 17500/205239 batches | accuracy    0.315\n","| epoch   1 | 18000/205239 batches | accuracy    0.300\n","| epoch   1 | 18500/205239 batches | accuracy    0.310\n","| epoch   1 | 19000/205239 batches | accuracy    0.307\n","| epoch   1 | 19500/205239 batches | accuracy    0.299\n","| epoch   1 | 20000/205239 batches | accuracy    0.310\n","| epoch   1 | 20500/205239 batches | accuracy    0.307\n","| epoch   1 | 21000/205239 batches | accuracy    0.307\n","| epoch   1 | 21500/205239 batches | accuracy    0.307\n","| epoch   1 | 22000/205239 batches | accuracy    0.319\n","| epoch   1 | 22500/205239 batches | accuracy    0.318\n","| epoch   1 | 23000/205239 batches | accuracy    0.304\n","| epoch   1 | 23500/205239 batches | accuracy    0.313\n","| epoch   1 | 24000/205239 batches | accuracy    0.307\n","| epoch   1 | 24500/205239 batches | accuracy    0.316\n","| epoch   1 | 25000/205239 batches | accuracy    0.311\n","| epoch   1 | 25500/205239 batches | accuracy    0.319\n","| epoch   1 | 26000/205239 batches | accuracy    0.321\n","| epoch   1 | 26500/205239 batches | accuracy    0.310\n","| epoch   1 | 27000/205239 batches | accuracy    0.304\n","| epoch   1 | 27500/205239 batches | accuracy    0.303\n","| epoch   1 | 28000/205239 batches | accuracy    0.316\n","| epoch   1 | 28500/205239 batches | accuracy    0.312\n","| epoch   1 | 29000/205239 batches | accuracy    0.317\n","| epoch   1 | 29500/205239 batches | accuracy    0.311\n","| epoch   1 | 30000/205239 batches | accuracy    0.319\n","| epoch   1 | 30500/205239 batches | accuracy    0.314\n","| epoch   1 | 31000/205239 batches | accuracy    0.314\n","| epoch   1 | 31500/205239 batches | accuracy    0.298\n","| epoch   1 | 32000/205239 batches | accuracy    0.315\n","| epoch   1 | 32500/205239 batches | accuracy    0.312\n","| epoch   1 | 33000/205239 batches | accuracy    0.312\n","| epoch   1 | 33500/205239 batches | accuracy    0.311\n","| epoch   1 | 34000/205239 batches | accuracy    0.290\n","| epoch   1 | 34500/205239 batches | accuracy    0.302\n","| epoch   1 | 35000/205239 batches | accuracy    0.304\n","| epoch   1 | 35500/205239 batches | accuracy    0.301\n","| epoch   1 | 36000/205239 batches | accuracy    0.302\n","| epoch   1 | 36500/205239 batches | accuracy    0.297\n","| epoch   1 | 37000/205239 batches | accuracy    0.309\n","| epoch   1 | 37500/205239 batches | accuracy    0.295\n","| epoch   1 | 38000/205239 batches | accuracy    0.303\n","| epoch   1 | 38500/205239 batches | accuracy    0.290\n","| epoch   1 | 39000/205239 batches | accuracy    0.299\n","| epoch   1 | 39500/205239 batches | accuracy    0.304\n","| epoch   1 | 40000/205239 batches | accuracy    0.296\n","| epoch   1 | 40500/205239 batches | accuracy    0.290\n","| epoch   1 | 41000/205239 batches | accuracy    0.296\n","| epoch   1 | 41500/205239 batches | accuracy    0.292\n","| epoch   1 | 42000/205239 batches | accuracy    0.308\n","| epoch   1 | 42500/205239 batches | accuracy    0.314\n","| epoch   1 | 43000/205239 batches | accuracy    0.303\n","| epoch   1 | 43500/205239 batches | accuracy    0.307\n","| epoch   1 | 44000/205239 batches | accuracy    0.292\n","| epoch   1 | 44500/205239 batches | accuracy    0.315\n","| epoch   1 | 45000/205239 batches | accuracy    0.309\n","| epoch   1 | 45500/205239 batches | accuracy    0.308\n","| epoch   1 | 46000/205239 batches | accuracy    0.312\n","| epoch   1 | 46500/205239 batches | accuracy    0.301\n","| epoch   1 | 47000/205239 batches | accuracy    0.315\n","| epoch   1 | 47500/205239 batches | accuracy    0.309\n","| epoch   1 | 48000/205239 batches | accuracy    0.308\n","| epoch   1 | 48500/205239 batches | accuracy    0.299\n","| epoch   1 | 49000/205239 batches | accuracy    0.301\n","| epoch   1 | 49500/205239 batches | accuracy    0.299\n","| epoch   1 | 50000/205239 batches | accuracy    0.301\n","| epoch   1 | 50500/205239 batches | accuracy    0.317\n","| epoch   1 | 51000/205239 batches | accuracy    0.304\n","| epoch   1 | 51500/205239 batches | accuracy    0.300\n","| epoch   1 | 52000/205239 batches | accuracy    0.298\n","| epoch   1 | 52500/205239 batches | accuracy    0.307\n","| epoch   1 | 53000/205239 batches | accuracy    0.315\n","| epoch   1 | 53500/205239 batches | accuracy    0.317\n","| epoch   1 | 54000/205239 batches | accuracy    0.326\n","| epoch   1 | 54500/205239 batches | accuracy    0.319\n","| epoch   1 | 55000/205239 batches | accuracy    0.302\n","| epoch   1 | 55500/205239 batches | accuracy    0.315\n","| epoch   1 | 56000/205239 batches | accuracy    0.315\n","| epoch   1 | 56500/205239 batches | accuracy    0.314\n","| epoch   1 | 57000/205239 batches | accuracy    0.319\n","| epoch   1 | 57500/205239 batches | accuracy    0.304\n","| epoch   1 | 58000/205239 batches | accuracy    0.312\n","| epoch   1 | 58500/205239 batches | accuracy    0.309\n","| epoch   1 | 59000/205239 batches | accuracy    0.314\n","| epoch   1 | 59500/205239 batches | accuracy    0.307\n","| epoch   1 | 60000/205239 batches | accuracy    0.313\n","| epoch   1 | 60500/205239 batches | accuracy    0.320\n","| epoch   1 | 61000/205239 batches | accuracy    0.327\n","| epoch   1 | 61500/205239 batches | accuracy    0.312\n","| epoch   1 | 62000/205239 batches | accuracy    0.320\n","| epoch   1 | 62500/205239 batches | accuracy    0.301\n","| epoch   1 | 63000/205239 batches | accuracy    0.302\n","| epoch   1 | 63500/205239 batches | accuracy    0.320\n","| epoch   1 | 64000/205239 batches | accuracy    0.317\n","| epoch   1 | 64500/205239 batches | accuracy    0.321\n","| epoch   1 | 65000/205239 batches | accuracy    0.317\n","| epoch   1 | 65500/205239 batches | accuracy    0.314\n","| epoch   1 | 66000/205239 batches | accuracy    0.321\n","| epoch   1 | 66500/205239 batches | accuracy    0.303\n","| epoch   1 | 67000/205239 batches | accuracy    0.315\n","| epoch   1 | 67500/205239 batches | accuracy    0.318\n","| epoch   1 | 68000/205239 batches | accuracy    0.322\n","| epoch   1 | 68500/205239 batches | accuracy    0.306\n","| epoch   1 | 69000/205239 batches | accuracy    0.324\n","| epoch   1 | 69500/205239 batches | accuracy    0.316\n","| epoch   1 | 70000/205239 batches | accuracy    0.315\n","| epoch   1 | 70500/205239 batches | accuracy    0.306\n","| epoch   1 | 71000/205239 batches | accuracy    0.309\n","| epoch   1 | 71500/205239 batches | accuracy    0.333\n","| epoch   1 | 72000/205239 batches | accuracy    0.312\n","| epoch   1 | 72500/205239 batches | accuracy    0.312\n","| epoch   1 | 73000/205239 batches | accuracy    0.318\n","| epoch   1 | 73500/205239 batches | accuracy    0.308\n","| epoch   1 | 74000/205239 batches | accuracy    0.326\n","| epoch   1 | 74500/205239 batches | accuracy    0.321\n","| epoch   1 | 75000/205239 batches | accuracy    0.318\n","| epoch   1 | 75500/205239 batches | accuracy    0.321\n","| epoch   1 | 76000/205239 batches | accuracy    0.304\n","| epoch   1 | 76500/205239 batches | accuracy    0.313\n","| epoch   1 | 77000/205239 batches | accuracy    0.324\n","| epoch   1 | 77500/205239 batches | accuracy    0.317\n","| epoch   1 | 78000/205239 batches | accuracy    0.322\n","| epoch   1 | 78500/205239 batches | accuracy    0.314\n","| epoch   1 | 79000/205239 batches | accuracy    0.324\n","| epoch   1 | 79500/205239 batches | accuracy    0.327\n","| epoch   1 | 80000/205239 batches | accuracy    0.326\n","| epoch   1 | 80500/205239 batches | accuracy    0.318\n","| epoch   1 | 81000/205239 batches | accuracy    0.330\n","| epoch   1 | 81500/205239 batches | accuracy    0.320\n","| epoch   1 | 82000/205239 batches | accuracy    0.325\n","| epoch   1 | 82500/205239 batches | accuracy    0.321\n","| epoch   1 | 83000/205239 batches | accuracy    0.319\n","| epoch   1 | 83500/205239 batches | accuracy    0.313\n","| epoch   1 | 84000/205239 batches | accuracy    0.309\n","| epoch   1 | 84500/205239 batches | accuracy    0.321\n","| epoch   1 | 85000/205239 batches | accuracy    0.311\n","| epoch   1 | 85500/205239 batches | accuracy    0.322\n","| epoch   1 | 86000/205239 batches | accuracy    0.315\n","| epoch   1 | 86500/205239 batches | accuracy    0.318\n","| epoch   1 | 87000/205239 batches | accuracy    0.314\n","| epoch   1 | 87500/205239 batches | accuracy    0.327\n","| epoch   1 | 88000/205239 batches | accuracy    0.315\n","| epoch   1 | 88500/205239 batches | accuracy    0.297\n","| epoch   1 | 89000/205239 batches | accuracy    0.332\n","| epoch   1 | 89500/205239 batches | accuracy    0.321\n","| epoch   1 | 90000/205239 batches | accuracy    0.319\n","| epoch   1 | 90500/205239 batches | accuracy    0.307\n","| epoch   1 | 91000/205239 batches | accuracy    0.324\n","| epoch   1 | 91500/205239 batches | accuracy    0.307\n","| epoch   1 | 92000/205239 batches | accuracy    0.318\n","| epoch   1 | 92500/205239 batches | accuracy    0.310\n","| epoch   1 | 93000/205239 batches | accuracy    0.319\n","| epoch   1 | 93500/205239 batches | accuracy    0.336\n","| epoch   1 | 94000/205239 batches | accuracy    0.320\n","| epoch   1 | 94500/205239 batches | accuracy    0.331\n","| epoch   1 | 95000/205239 batches | accuracy    0.321\n","| epoch   1 | 95500/205239 batches | accuracy    0.321\n","| epoch   1 | 96000/205239 batches | accuracy    0.330\n","| epoch   1 | 96500/205239 batches | accuracy    0.314\n","| epoch   1 | 97000/205239 batches | accuracy    0.323\n","| epoch   1 | 97500/205239 batches | accuracy    0.328\n","| epoch   1 | 98000/205239 batches | accuracy    0.309\n","| epoch   1 | 98500/205239 batches | accuracy    0.324\n","| epoch   1 | 99000/205239 batches | accuracy    0.325\n","| epoch   1 | 99500/205239 batches | accuracy    0.317\n","| epoch   1 | 100000/205239 batches | accuracy    0.320\n","| epoch   1 | 100500/205239 batches | accuracy    0.319\n","| epoch   1 | 101000/205239 batches | accuracy    0.307\n","| epoch   1 | 101500/205239 batches | accuracy    0.319\n","| epoch   1 | 102000/205239 batches | accuracy    0.324\n","| epoch   1 | 102500/205239 batches | accuracy    0.340\n","| epoch   1 | 103000/205239 batches | accuracy    0.326\n","| epoch   1 | 103500/205239 batches | accuracy    0.331\n","| epoch   1 | 104000/205239 batches | accuracy    0.325\n","| epoch   1 | 104500/205239 batches | accuracy    0.322\n","| epoch   1 | 105000/205239 batches | accuracy    0.326\n","| epoch   1 | 105500/205239 batches | accuracy    0.323\n","| epoch   1 | 106000/205239 batches | accuracy    0.327\n","| epoch   1 | 106500/205239 batches | accuracy    0.321\n","| epoch   1 | 107000/205239 batches | accuracy    0.315\n","| epoch   1 | 107500/205239 batches | accuracy    0.327\n","| epoch   1 | 108000/205239 batches | accuracy    0.332\n","| epoch   1 | 108500/205239 batches | accuracy    0.331\n","| epoch   1 | 109000/205239 batches | accuracy    0.332\n","| epoch   1 | 109500/205239 batches | accuracy    0.322\n","| epoch   1 | 110000/205239 batches | accuracy    0.321\n","| epoch   1 | 110500/205239 batches | accuracy    0.320\n","| epoch   1 | 111000/205239 batches | accuracy    0.316\n","| epoch   1 | 111500/205239 batches | accuracy    0.327\n","| epoch   1 | 112000/205239 batches | accuracy    0.330\n","| epoch   1 | 112500/205239 batches | accuracy    0.327\n","| epoch   1 | 113000/205239 batches | accuracy    0.323\n","| epoch   1 | 113500/205239 batches | accuracy    0.314\n","| epoch   1 | 114000/205239 batches | accuracy    0.316\n","| epoch   1 | 114500/205239 batches | accuracy    0.337\n","| epoch   1 | 115000/205239 batches | accuracy    0.335\n","| epoch   1 | 115500/205239 batches | accuracy    0.327\n","| epoch   1 | 116000/205239 batches | accuracy    0.316\n","| epoch   1 | 116500/205239 batches | accuracy    0.329\n","| epoch   1 | 117000/205239 batches | accuracy    0.327\n","| epoch   1 | 117500/205239 batches | accuracy    0.327\n","| epoch   1 | 118000/205239 batches | accuracy    0.320\n","| epoch   1 | 118500/205239 batches | accuracy    0.333\n","| epoch   1 | 119000/205239 batches | accuracy    0.326\n","| epoch   1 | 119500/205239 batches | accuracy    0.320\n","| epoch   1 | 120000/205239 batches | accuracy    0.335\n","| epoch   1 | 120500/205239 batches | accuracy    0.334\n","| epoch   1 | 121000/205239 batches | accuracy    0.321\n","| epoch   1 | 121500/205239 batches | accuracy    0.333\n","| epoch   1 | 122000/205239 batches | accuracy    0.314\n","| epoch   1 | 122500/205239 batches | accuracy    0.331\n","| epoch   1 | 123000/205239 batches | accuracy    0.328\n","| epoch   1 | 123500/205239 batches | accuracy    0.315\n","| epoch   1 | 124000/205239 batches | accuracy    0.323\n","| epoch   1 | 124500/205239 batches | accuracy    0.325\n","| epoch   1 | 125000/205239 batches | accuracy    0.337\n","| epoch   1 | 125500/205239 batches | accuracy    0.343\n","| epoch   1 | 126000/205239 batches | accuracy    0.315\n","| epoch   1 | 126500/205239 batches | accuracy    0.327\n","| epoch   1 | 127000/205239 batches | accuracy    0.307\n","| epoch   1 | 127500/205239 batches | accuracy    0.330\n","| epoch   1 | 128000/205239 batches | accuracy    0.320\n","| epoch   1 | 128500/205239 batches | accuracy    0.325\n","| epoch   1 | 129000/205239 batches | accuracy    0.327\n","| epoch   1 | 129500/205239 batches | accuracy    0.330\n","| epoch   1 | 130000/205239 batches | accuracy    0.327\n","| epoch   1 | 130500/205239 batches | accuracy    0.308\n","| epoch   1 | 131000/205239 batches | accuracy    0.328\n","| epoch   1 | 131500/205239 batches | accuracy    0.332\n","| epoch   1 | 132000/205239 batches | accuracy    0.337\n","| epoch   1 | 132500/205239 batches | accuracy    0.319\n","| epoch   1 | 133000/205239 batches | accuracy    0.328\n","| epoch   1 | 133500/205239 batches | accuracy    0.324\n","| epoch   1 | 134000/205239 batches | accuracy    0.331\n","| epoch   1 | 134500/205239 batches | accuracy    0.327\n","| epoch   1 | 135000/205239 batches | accuracy    0.334\n","| epoch   1 | 135500/205239 batches | accuracy    0.353\n","| epoch   1 | 136000/205239 batches | accuracy    0.320\n","| epoch   1 | 136500/205239 batches | accuracy    0.342\n","| epoch   1 | 137000/205239 batches | accuracy    0.331\n","| epoch   1 | 137500/205239 batches | accuracy    0.340\n","| epoch   1 | 138000/205239 batches | accuracy    0.327\n","| epoch   1 | 138500/205239 batches | accuracy    0.338\n","| epoch   1 | 139000/205239 batches | accuracy    0.322\n","| epoch   1 | 139500/205239 batches | accuracy    0.341\n","| epoch   1 | 140000/205239 batches | accuracy    0.335\n","| epoch   1 | 140500/205239 batches | accuracy    0.335\n","| epoch   1 | 141000/205239 batches | accuracy    0.327\n","| epoch   1 | 141500/205239 batches | accuracy    0.318\n","| epoch   1 | 142000/205239 batches | accuracy    0.335\n","| epoch   1 | 142500/205239 batches | accuracy    0.316\n","| epoch   1 | 143000/205239 batches | accuracy    0.327\n","| epoch   1 | 143500/205239 batches | accuracy    0.326\n","| epoch   1 | 144000/205239 batches | accuracy    0.323\n","| epoch   1 | 144500/205239 batches | accuracy    0.336\n","| epoch   1 | 145000/205239 batches | accuracy    0.332\n","| epoch   1 | 145500/205239 batches | accuracy    0.329\n","| epoch   1 | 146000/205239 batches | accuracy    0.334\n","| epoch   1 | 146500/205239 batches | accuracy    0.327\n","| epoch   1 | 147000/205239 batches | accuracy    0.332\n","| epoch   1 | 147500/205239 batches | accuracy    0.334\n","| epoch   1 | 148000/205239 batches | accuracy    0.316\n","| epoch   1 | 148500/205239 batches | accuracy    0.336\n","| epoch   1 | 149000/205239 batches | accuracy    0.325\n","| epoch   1 | 149500/205239 batches | accuracy    0.337\n","| epoch   1 | 150000/205239 batches | accuracy    0.333\n","| epoch   1 | 150500/205239 batches | accuracy    0.309\n","| epoch   1 | 151000/205239 batches | accuracy    0.330\n","| epoch   1 | 151500/205239 batches | accuracy    0.333\n","| epoch   1 | 152000/205239 batches | accuracy    0.339\n","| epoch   1 | 152500/205239 batches | accuracy    0.332\n","| epoch   1 | 153000/205239 batches | accuracy    0.334\n","| epoch   1 | 153500/205239 batches | accuracy    0.343\n","| epoch   1 | 154000/205239 batches | accuracy    0.335\n","| epoch   1 | 154500/205239 batches | accuracy    0.331\n","| epoch   1 | 155000/205239 batches | accuracy    0.333\n","| epoch   1 | 155500/205239 batches | accuracy    0.330\n","| epoch   1 | 156000/205239 batches | accuracy    0.330\n","| epoch   1 | 156500/205239 batches | accuracy    0.348\n","| epoch   1 | 157000/205239 batches | accuracy    0.326\n","| epoch   1 | 157500/205239 batches | accuracy    0.342\n","| epoch   1 | 158000/205239 batches | accuracy    0.327\n","| epoch   1 | 158500/205239 batches | accuracy    0.337\n","| epoch   1 | 159000/205239 batches | accuracy    0.321\n","| epoch   1 | 159500/205239 batches | accuracy    0.325\n","| epoch   1 | 160000/205239 batches | accuracy    0.335\n","| epoch   1 | 160500/205239 batches | accuracy    0.340\n","| epoch   1 | 161000/205239 batches | accuracy    0.343\n","| epoch   1 | 161500/205239 batches | accuracy    0.330\n","| epoch   1 | 162000/205239 batches | accuracy    0.334\n","| epoch   1 | 162500/205239 batches | accuracy    0.346\n","| epoch   1 | 163000/205239 batches | accuracy    0.337\n","| epoch   1 | 163500/205239 batches | accuracy    0.344\n","| epoch   1 | 164000/205239 batches | accuracy    0.341\n","| epoch   1 | 164500/205239 batches | accuracy    0.349\n","| epoch   1 | 165000/205239 batches | accuracy    0.334\n","| epoch   1 | 165500/205239 batches | accuracy    0.339\n","| epoch   1 | 166000/205239 batches | accuracy    0.334\n","| epoch   1 | 166500/205239 batches | accuracy    0.336\n","| epoch   1 | 167000/205239 batches | accuracy    0.325\n","| epoch   1 | 167500/205239 batches | accuracy    0.331\n","| epoch   1 | 168000/205239 batches | accuracy    0.331\n","| epoch   1 | 168500/205239 batches | accuracy    0.333\n","| epoch   1 | 169000/205239 batches | accuracy    0.346\n","| epoch   1 | 169500/205239 batches | accuracy    0.338\n","| epoch   1 | 170000/205239 batches | accuracy    0.330\n","| epoch   1 | 170500/205239 batches | accuracy    0.335\n","| epoch   1 | 171000/205239 batches | accuracy    0.335\n","| epoch   1 | 171500/205239 batches | accuracy    0.326\n","| epoch   1 | 172000/205239 batches | accuracy    0.326\n","| epoch   1 | 172500/205239 batches | accuracy    0.342\n","| epoch   1 | 173000/205239 batches | accuracy    0.344\n","| epoch   1 | 173500/205239 batches | accuracy    0.325\n","| epoch   1 | 174000/205239 batches | accuracy    0.332\n","| epoch   1 | 174500/205239 batches | accuracy    0.338\n","| epoch   1 | 175000/205239 batches | accuracy    0.343\n","| epoch   1 | 175500/205239 batches | accuracy    0.323\n","| epoch   1 | 176000/205239 batches | accuracy    0.340\n","| epoch   1 | 176500/205239 batches | accuracy    0.324\n","| epoch   1 | 177000/205239 batches | accuracy    0.339\n","| epoch   1 | 177500/205239 batches | accuracy    0.329\n","| epoch   1 | 178000/205239 batches | accuracy    0.345\n","| epoch   1 | 178500/205239 batches | accuracy    0.348\n","| epoch   1 | 179000/205239 batches | accuracy    0.339\n","| epoch   1 | 179500/205239 batches | accuracy    0.335\n","| epoch   1 | 180000/205239 batches | accuracy    0.335\n","| epoch   1 | 180500/205239 batches | accuracy    0.346\n","| epoch   1 | 181000/205239 batches | accuracy    0.341\n","| epoch   1 | 181500/205239 batches | accuracy    0.340\n","| epoch   1 | 182000/205239 batches | accuracy    0.350\n","| epoch   1 | 182500/205239 batches | accuracy    0.327\n","| epoch   1 | 183000/205239 batches | accuracy    0.341\n","| epoch   1 | 183500/205239 batches | accuracy    0.341\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-16-9f550bd8a7c3>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     27\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mepoch\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mEPOCHS\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     28\u001b[0m     \u001b[0mepoch_start_time\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 29\u001b[0;31m     \u001b[0mtrain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataloader\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     30\u001b[0m     \u001b[0maccu_val\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mevaluate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalid_dataloader\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mtotal_accu\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mtotal_accu\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0maccu_val\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-12-9a5bc2a1d832>\u001b[0m in \u001b[0;36mtrain\u001b[0;34m(dataloader)\u001b[0m\n\u001b[1;32m     14\u001b[0m         \u001b[0mloss\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbackward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m         \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mutils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclip_grad_norm_\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0.1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m         \u001b[0moptimizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     17\u001b[0m         \u001b[0mtotal_acc\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mpredicted_label\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m         \u001b[0mtotal_count\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/optim/lr_scheduler.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     63\u001b[0m                 \u001b[0minstance\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_step_count\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     64\u001b[0m                 \u001b[0mwrapped\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__get__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minstance\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcls\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 65\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mwrapped\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     66\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     67\u001b[0m             \u001b[0;31m# Note that the returned function here is no longer a bound method,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/optim/optimizer.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     86\u001b[0m                 \u001b[0mprofile_name\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"Optimizer.step#{}.step\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__class__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     87\u001b[0m                 \u001b[0;32mwith\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mautograd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprofiler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecord_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprofile_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 88\u001b[0;31m                     \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     89\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     90\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/autograd/grad_mode.py\u001b[0m in \u001b[0;36mdecorate_context\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     26\u001b[0m         \u001b[0;32mdef\u001b[0m \u001b[0mdecorate_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     27\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__class__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 28\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     29\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mcast\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mF\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdecorate_context\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     30\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/optim/sgd.py\u001b[0m in \u001b[0;36mstep\u001b[0;34m(self, closure)\u001b[0m\n\u001b[1;32m    115\u001b[0m                   \u001b[0mlr\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlr\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    116\u001b[0m                   \u001b[0mdampening\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdampening\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 117\u001b[0;31m                   nesterov=nesterov)\n\u001b[0m\u001b[1;32m    118\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    119\u001b[0m             \u001b[0;31m# update momentum_buffers in state\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/optim/_functional.py\u001b[0m in \u001b[0;36msgd\u001b[0;34m(params, d_p_list, momentum_buffer_list, weight_decay, momentum, lr, dampening, nesterov)\u001b[0m\n\u001b[1;32m    178\u001b[0m                 \u001b[0md_p\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbuf\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    179\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 180\u001b[0;31m         \u001b[0mparam\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd_\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0md_p\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0malpha\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mlr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    181\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    182\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]}]}